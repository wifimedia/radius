# -*- text -*-
##
## policy.conf	-- FreeRADIUS server configuration file.
##
##	http://www.freeradius.org/
##	$Id$
##

#
#  Policies are virtual modules, similar to those defined in the
#  "instantate" section of radiusd.conf.
#
#  Defining a policy here means that it can be referenced in multiple
#  places as a *name*, rather than as a series of conditions to match,
#  and actions to take.
#
#  Policies are something like subroutines in a normal language, but
#  they cannot be called recursively.  They MUST be defined in order.
#  If policy A calls policy B, then B MUST be defined before A.
#
policy {

	#
	# Rewrite called station id attribute into a standard format.
	#
	rewrite_calling_station_id {
       		if(request:Calling-Station-Id =~ /([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})/i){
                	update request {
                        	Calling-Station-Id := "%{1}-%{2}-%{3}-%{4}-%{5}-%{6}"
                	}
        	}
        	else {
                	noop
        	}
	}

	#____ RADIUSdesk policies __________


	RADIUSdesk_rewrite_called_station_id {
        if(Called-Station-Id =~ /^([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([-a-z0-9_. ]*)?/i){

				if("%{7}"){
                	update control {
                        Rd-Ssid-Value := "%{7}"
                	}
					updated
				}
				else {
					noop
				} 
        }
        else {
                noop
        }
	}


    RADIUSdesk_device_check {

        update control {
	        Rd-Mac-Tmp-Username := "%{request:User-Name}"
	    }

        update request {
	        User-Name := "%{request:Calling-Station-Id}"
	    }
	    RADIUSdesk_user_check

        update request {
            User-Name := "%{control:Rd-Mac-Tmp-Username}"
	   }
    }

    RADIUSdesk_device_owner_check {

        update control {
			    Rd-Mac-Tmp-Username := "%{request:User-Name}"
	    }
	    update request {
	        User-Name := "%{control:Rd-Tmp-Owner}"
	    }
	    RADIUSdesk_user_check

	    update request {
            User-Name := "%{control:Rd-Mac-Tmp-Username}"
	    }
        RADIUSdesk_user_check
    }

    RADIUSdesk_data_counter {

        if((control:Rd-Total-Data)&&(control:Rd-Reset-Type-Data)&&(control:Rd-Cap-Type-Data == 'hard')){
            pl_reset_time_for_data
            if(updated){ # Reset Time was updated,
                # we can now use it in a query
                if("%{control:Rd-Tmp-Avail-Data}"){ #This indicates it it a device!
                    update control {
                        Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))+ SUM(acctoutputoctets -GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0) FROM radacct WHERE callingstationid='%{request:User-Name}' AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                    }
                }
                else{ 
                    #Here we need to see if the counter is to be applied on the device level and there is a device present in the request
                    if((control:Rd-Mac-Counter-Data)&&(request:Calling-Station-Id)){
                        update control {
                            Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))\
                            + SUM(acctoutputoctets -GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                            FROM radacct WHERE username='%{request:User-Name}' AND callingstationid='%{request:Calling-Station-Id}' \
                            AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                        }
                    }
                    else{
                        update control {
                            Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))\
                            + SUM(acctoutputoctets -GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                            FROM radacct WHERE username='%{request:User-Name}'\
                            AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                        }
                    }
                }
            }
            else{
                #Asumes reset type = never
                #Get the total usage of the user
                if("%{control:Rd-Tmp-Avail-Data}"){ #This indicates it it a device!
                    update control {
                        Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets)+SUM(acctoutputoctets),0) FROM radacct WHERE callingstationid='%{request:User-Name}'}"
                    }
                }
                else{
                    if((control:Rd-Mac-Counter-Data)&&(request:Calling-Station-Id)){
                        update control {
                            Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets)+SUM(acctoutputoctets),0) FROM radacct WHERE username='%{request:User-Name}' \
                            AND callingstationid='%{request:Calling-Station-Id}'}"
                        }
                    }
                    else{
                        update control {
                            Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets)+SUM(acctoutputoctets),0) FROM radacct WHERE username='%{request:User-Name}'}"
                        }
                    }
                }
            }

            #Now we know how much they are allowed to use and the usage.
            pl_check_usage_data
        }
    }


    RADIUSdesk_time_counter {

        if((control:Rd-Total-Time)&&(control:Rd-Reset-Type-Time)&&(control:Rd-Cap-Type-Time == 'hard')){
            pl_reset_time_for_time
            if(updated){ # Reset Time was updated,
                # we can now use it in a query
                if("%{control:Rd-Tmp-Avail-Time}"){ #This indicates it it a device!
                    update control {
						Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0) FROM radacct WHERE callingstationid='%{request:User-Name}' AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                    }
                }
                else{
                    #Here we need to see if the counter is to be applied on the device level and there is a device present in the request
                    if((control:Rd-Mac-Counter-Time)&&(request:Calling-Station-Id)){
                        update control {
                            Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                            FROM radacct WHERE username='%{request:User-Name}' AND callingstationid='%{request:Calling-Station-Id}' \
                            AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                        }
                    }
                    else{
                        update control {
                            Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                            FROM radacct WHERE username='%{request:User-Name}' AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                        }
                    }
                }
            }
            else{
                #Asumes reset type = never
                #Get the total usage of the user
                if("%{control:Rd-Tmp-Avail-Time}"){ #This indicates it it a device!
                    update control {
                        Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(AcctSessionTime),0) FROM radacct WHERE callingstationid='%{request:User-Name}'}"
                    }
                }
                else{
                   if((control:Rd-Mac-Counter-Time)&&(request:Calling-Station-Id)){
                        update control {
                            Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(AcctSessionTime),0) FROM radacct WHERE username='%{request:User-Name}' \
                            AND callingstationid='%{request:Calling-Station-Id}'}"
                        }
                    }
                    else{
                        update control {
                            Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(AcctSessionTime),0) FROM radacct WHERE username='%{request:User-Name}'}"
                        }
                    }
                }
            }

            #Now we know how much they are allowed to use and the usage.
            pl_check_usage_time
        }
    }

    RADIUSdesk_voucher_check {
        if("%{control:Rd-Voucher}"){

            #Check if the Rd-Voucher is in the correct format
            if("%{control:Rd-Voucher}" =~ /([0-9]{1,3})[-]?([0-9]{2})[-]?([0-9]{2})[-]?([0-9]{2})/i){

                    #Get the amount of time available
                	update control {
                        	Rd-Voucher-Time-Available := "%{expr: (%{1} * 86400)+(%{2} * 3600) + (%{3}* 60) +(%{4})}"
                	}

                    #Check if the voucher connected before

                    if("%{sql:SELECT count(username) FROM radacct WHERE radacct.username='%{request:User-Name}'}" > 0){

                        update control {
                            #select (UNIX_TIMESTAMP(now()) - UNIX_TIMESTAMP(acctstarttime)) as time_since_login from radacct where username='000001' order by acctstarttime ASC LIMIT 1;  
                            Rd-Voucher-Time-Expired := "%{sql:SELECT UNIX_TIMESTAMP(now()) - UNIX_TIMESTAMP(acctstarttime) FROM radacct WHERE username='%{request:User-Name}' ORDER by acctstarttime ASC LIMIT 1}"
                        }

                        #Check if there is still time available 
                        if("%{control:Rd-Voucher-Time-Expired}" <= "%{control:Rd-Voucher-Time-Available}"){
                            update control {
                                Rd-Voucher-Timeout := "%{expr: %{control:Rd-Voucher-Time-Available} - %{control:Rd-Voucher-Time-Expired}}"
                            }
                        }
                        else{
                            update reply {
                                Reply-Message := "The time for voucher %{request:User-Name} is depleted"
                            }
                            reject
                        }
                    }
                    else{
                        update control {
                            Rd-Voucher-Timeout := "%{control:Rd-Voucher-Time-Available}"
                        }
                    }
        	}
        }
    }

    RADIUSdesk_realm_nas_check {

        #___This check will be done in two steps ___
        # 1.) If there are no entries of the nas device's id in the na_realms table; any-one can connect and we can pass the request
        # 2.) If however there are entries; we need to check if they contain the realm the user belongs to
        #___________________________________________

        #Only if the request actually contains a value for NAS-Identifier
        if("%{request:NAS-Identifier}"){
            #Check if some realms are associated with this NAS
            if("%{sql:SELECT COUNT(na_realms.id) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id WHERE nas.nasidentifier='%{request:NAS-Identifier}'}" > 0){
                #Only if Rd-Realm is defined; Check if this realm is one of the associated ones. If NOT; reject the request
                if("%{control:Rd-Realm}"){ 
                    if("%{sql:SELECT COUNT(nas.nasname) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id LEFT JOIN realms ON realms.id=na_realms.realm_id WHERE nas.nasidentifier='%{request:NAS-Identifier}' AND realms.name='%{control:Rd-Realm}'}" == 0){
                        update reply {
                            Reply-Message := "User %{request:User-Name} belongs to realm %{control:Rd-Realm} which cannot connect to %{request:NAS-Identifier}"
                        }
                        reject
                    }
                }
            }
        }    
        
        #Only if the request actually contains a value for NAS-IP-Address
        if("%{request:NAS-IP-Address}"){
            #Check if some realms are associated with this NAS
            if("%{sql:SELECT COUNT(na_realms.id) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id WHERE nas.nasname='%{request:NAS-IP-Address}'}" > 0){
                #Only if Rd-Realm is defined; Check if this realm is one of the associated ones. If NOT; reject the request
                if("%{control:Rd-Realm}"){ 
                    if("%{sql:SELECT COUNT(nas.nasname) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id LEFT JOIN realms ON realms.id=na_realms.realm_id WHERE nas.nasname='%{request:NAS-IP-Address}' AND realms.name='%{control:Rd-Realm}'}" == 0){
                        update reply {
                            Reply-Message := "User %{request:User-Name} belongs to realm %{control:Rd-Realm} which cannot connect to %{request:NAS-IP-Address}"
                        }
                        reject
                    }
                }
            }
        }    
    }

	RADIUSdesk_user_ssid_check {
		#__We check if the user is flagged to only connect through certain SSIDs (Rd-Ssid-Check == 1)_
		#__If so we try to find the SSID and see if this ssid is allowed for the specific user________

		#If it is present....
		if("%{control:Rd-Ssid-Check}"){
			#If it is == 1
			if("%{control:Rd-Ssid-Check}" == 1){
				RADIUSdesk_rewrite_called_station_id
				if(updated){
					if("%{sql:SELECT COUNT(*) FROM user_ssids WHERE username= '%{request:User-Name}' AND ssidname= '%{control:Rd-Ssid-Value}'}" > 0){
                		ok
        			}
        			else {
						update reply {
				            Reply-Message := "User %{request:User-Name} has not permission to connect through SSID: %{control:Rd-Ssid-Value}"
				        }
                		reject
        			}
				}
				else {
					update reply {
			            Reply-Message := "No SSID available to evaluate SSID restriction"
			        }
            		reject
				}
			}
		}
	}

    RADIUSdesk_user_check {

        sql
        #If the sql data sourced fine; we can do tests for the presence of the following special attributes
        if(ok){
        
            #Test to see if the account for this username is active
	        if(("%{control:Rd-Account-Disabled}")&&("%{control:Rd-Account-Disabled}" == 1)){
        	    update reply {
                    Reply-Message := "User %{request:User-Name} account disabled"
                }
                reject
            }

            #Check if this user has an activation time
            if("%{control:Rd-Account-Activation-Time}"){
                pl_check_activation
            }

            #Set the realm if Rd-Realm is present
            if("%{control:Rd-Realm}"){
        	    update request {
                    Realm := "%{control:Rd-Realm}"
                }
            }                      	

            #If the account type is different that the default 'sql' set the Auth-Type accordingly
            if(("%{control:Rd-Auth-Type}")&&("%{control:Rd-Auth-Type}" != 'sql')){
                update control {
                    Auth-Type := "%{control:Rd-Auth-Type}"
                }
            }

	        #Check if there are any data counters defined for this user
            RADIUSdesk_data_counter

            #Check if there are any time counters defined for this user
            RADIUSdesk_time_counter

            #Check if it is a voucher with Rd-Voucher and if it is still valid
            RADIUSdesk_voucher_check

            #Check if this realm is allowed to connect to this device
            RADIUSdesk_realm_nas_check

			#Check if there are SSID restrictions declared
			RADIUSdesk_user_ssid_check
        }
    }

    RADIUSdesk_main {

        # Check if MAC username and set the MAC username to the convention AA-BB-CC-DD-12...
        if(request:User-Name =~ /^([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})$/i){
            update request {
                User-Name := "%{1}-%{2}-%{3}-%{4}-%{5}-%{6}"
            }
    	}

        #If the user is not present we will reject the request
        if("%{sql:SELECT count(username) FROM radcheck WHERE radcheck.username='%{request:User-Name}'}" == 0){
            update reply {
                Reply-Message := "User %{request:User-Name} not registered"
            }
            reject
        }


        #See if the device is perhaps declared
        if("%{sql:SELECT count(username) FROM radcheck WHERE radcheck.username='%{request:Calling-Station-Id}'}" != 0){
            RADIUSdesk_device_check
 
        }   #Are we allowing the user to connect with undeclared MAC's?
        elsif("%{sql:SELECT count(radcheck.username) FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Mac-Check' and value=1}"){
            update reply {
                Reply-Message := "User %{request:User-Name} are not allowed to connect with a device containing MAC %{request:Calling-Station-Id}"
            }
            reject
        }

         #Check if device; and who is the owner and if the owner has some restrictions
        update control {
            Rd-Tmp-Owner := "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Device-Owner'}"
 	    }

        if("%{control:Rd-Tmp-Owner}"){ 
            RADIUSdesk_device_owner_check
        }
        else {
            RADIUSdesk_user_check  
        }
    }

    RADIUSdesk_session_timeout {

        if("%{reply:Session-Timeout}"){

            #Check if Rd-Avail-Time AND Rd-Voucher-Timeout is present. 
            #Find the smallest of them and compare it with reply:Session-Timeout
            if(("%{control:Rd-Avail-Time}")&&("%{control:Rd-Voucher-Timeout}")){
                if("%{control:Rd-Avail-Time}" < "%{control:Rd-Voucher-Timeout}" ){
                    if( "%{reply:Session-Timeout}"  >  "%{control:Rd-Avail-Time}"){
                        update reply {
                            Session-Timeout := "%{control:Rd-Avail-Time}"
                        }
                    }     
                }
                else {
                    if( "%{reply:Session-Timeout}"  >  "%{control:Rd-Voucher-Timeout}"){
                        update reply {
                            Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                        }
                    }
                }
            }
            elsif("%{control:Rd-Avail-Time}"){
                if( "%{reply:Session-Timeout}"  >  "%{control:Rd-Avail-Time}"){
                    update reply {
                        Session-Timeout := "%{control:Rd-Avail-Time}"
                    }
                } 
            }
            elsif("%{control:Rd-Voucher-Timeout}"){
                if( "%{reply:Session-Timeout}"  >  "%{control:Rd-Voucher-Timeout}"){
                    update reply {
                        Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                    }
                }
            }
        }
        else {

            #Check if Rd-Avail-Time AND Rd-Voucher-Timeout is present. 
            #Find the smallest of them and set that to Session-Timeout reply attribute
            if(("%{control:Rd-Avail-Time}")&&("%{control:Rd-Voucher-Timeout}")){
                if("%{control:Rd-Time-Counter-Timeout}" < "%{control:Rd-Voucher-Timeout}" ){
                    update reply {
                        Session-Timeout := "%{control:Rd-Avail-Time}"
                    } 
                }
                else {
                    update reply {
                        Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                    }
                }
            }
            elsif("%{control:Rd-Avail-Time}"){
                update reply {
                    Session-Timeout := "%{control:Rd-Avail-Time}"
                }
            }
            elsif("%{control:Rd-Voucher-Timeout}"){
                update reply {
                    Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                }
            }
        }
    }

	RADIUSdesk_post_auth {
        #This will record authentication attempts on any unknown user successfully authenticating
        
        #EAP-Message request does not contain the Realm; source it first
        if(EAP-Message){
            update control {
                Rd-Realm = "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Realm'}"
                Rd-Not-Track-Auth = "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Not-Track-Auth'}"
            }

            if("%{control:Rd-Realm}"){
        	    update request {
                    Realm := "%{control:Rd-Realm}"
                }
            }   
        }

		if((!"%{control:Rd-Not-Track-Auth}")||("%{control:Rd-Not-Track-Auth}" != 1)){
			sql
		}
	}

    RADIUSdesk_last_accept {
        #We do this regardless!
        if("%{sql:SELECT count(username) FROM `permanent_users` where username='%{User-Name}'}" > 0){
            "%{sql:UPDATE `permanent_users` SET last_accept_time=now(),last_accept_nas='%{NAS-IP-Address}' where username='%{User-Name}'}"
        }

        if("%{sql:SELECT count(name) FROM `devices` where name='%{Calling-Station-Id}'}" > 0){
            "%{sql:UPDATE `devices` SET last_accept_time=now(),last_accept_nas='%{NAS-IP-Address}' where name='%{Calling-Station-Id}'}"
        }

        if("%{sql:SELECT count(name) FROM `vouchers` where name='%{User-Name}'}" > 0){
            "%{sql:UPDATE `vouchers` SET last_accept_time=now(),last_accept_nas='%{NAS-IP-Address}' where name='%{User-Name}'}"
        }
	}

    RADIUSdesk_last_reject {
        #We do this regardless!
        #Check if it is an EAP request; if PEAP the error message will not be set.
        # http://freeradius.1045715.n5.nabble.com/Sending-Reply-Message-in-Access-Reject-PEAP-MSCHAPv2-td4421770.html
        if(EAP-Message){
            if(!"%{reply:Reply-Message}"){
                update reply {
                    Reply-Message := "Most likely PEAP failure. Run in debug"
                }
            }
        }

        if("%{sql:SELECT count(username) FROM `permanent_users` where username='%{User-Name}'}" > 0){
            "%{sql:UPDATE `permanent_users` SET last_reject_time=now(),last_reject_nas='%{NAS-IP-Address}',last_reject_message='%{%{reply:Reply-Message}:-N/A}' where username='%{User-Name}'}"
        }

        if("%{sql:SELECT count(name) FROM `devices` where name='%{Calling-Station-Id}'}" > 0){
            "%{sql:UPDATE `devices` SET last_reject_time=now(),last_reject_nas='%{NAS-IP-Address}',last_reject_message='%{%{reply:Reply-Message}:-N/A}' where name='%{Calling-Station-Id}'}"
        }

        if("%{sql:SELECT count(name) FROM `vouchers` where name='%{User-Name}'}" > 0){
            "%{sql:UPDATE `vouchers` SET last_reject_time=now(),last_reject_nas='%{NAS-IP-Address}',last_reject_message='%{%{reply:Reply-Message}:-N/A}' where name='%{User-Name}'}"
        }
	}

    RADIUSdesk_set_acct_realm {
        #Check if there is a realm defiend for this user and update if so
        update control {
            Rd-Realm := "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Realm'}"
 	    }

        if("%{control:Rd-Realm}"){ 
            update request {
                Realm := "%{control:Rd-Realm}"
            }
        }
    }

    RADIUSdesk_async_acct {
        #Requires a User-Name in the request and a table called new_accountings with a username column
        if(("%{request:User-Name}")&&("%{request:Calling-Station-Id}")){
            "%{sql:INSERT IGNORE INTO new_accountings SET new_accountings.username='%{request:User-Name}',new_accountings.mac='%{request:Calling-Station-Id}'}"
        }
    }

    RADIUSdesk_auto_devices_check {
        #Requires a User-Name in the request and a table called new_accountings with a username column
        if(("%{request:User-Name}")&&("%{request:Calling-Station-Id}")){
            if("%{control:Rd-Auto-Mac}" == 1){
                "%{sql:INSERT IGNORE INTO auto_devices SET auto_devices.username='%{request:User-Name}', auto_devices.mac='%{request:Calling-Station-Id}'}"
            }
        }

     #  if("%{request:User-Name}"){
     #       if("%{control:Rd-Auto-Mac}" == 1){
     #           "%{sql:INSERT IGNORE INTO auto_devices SET auto_devices.username='%{request:User-Name}', auto_devices.mac='%{request:User-Name}'}"
     #       }
     #   }

    }

    #Check if accounting is not disabled for this user;
    #If it is NOT disabled; set the realm and add an entry to the new_accountings entry if not already present
    #Else set theRd-Not-Track-Acct flag to 1 which will cause the sql accounting to be ignored in the acct section

    RADIUSdesk_preacct {

        #RADIUSdesk -> Used to normalise the callingstation id to format aa-bb-cc-dd-ee.. (lowercase with dash)
	    rewrite.calling_station_id

        #See if we it is perhaps a device and if we then need to change to the username
        if(request:User-Name =~ /^([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})$/i){
        #if(request:User-Name =~ /([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})/i){

            update control {
                Rd-Device-Owner = "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:Calling-Station-Id}' and attribute='Rd-Device-Owner'}"
            }

            if("%{control:Rd-Device-Owner}"){
                update request {
                    User-Name := "%{control:Rd-Device-Owner}"
                }
            }

	    #Add the posibility to attach devices to Vouchers
            update control {
                Rd-Voucher-Device-Owner = "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:Calling-Station-Id}' and attribute='Rd-Voucher-Device-Owner'}"
            }

            if("%{control:Rd-Voucher-Device-Owner}"){
                update request {
                    User-Name := "%{control:Rd-Voucher-Device-Owner}"
                }
            }


        }

        #Only if the Rd-Not-Track-Acct is NOT present OR set to 0!
        update control {
            Rd-Not-Track-Acct = "%{sql:SELECT count(radcheck.username) FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Not-Track-Acct' and value=1}"
        }
        if("%{control:Rd-Not-Track-Acct}" == 0){
            RADIUSdesk_set_acct_realm
            RADIUSdesk_async_acct
        }
    }

    RADIUSdesk_acct {
        #Note that this requires the RADIUSdesk_preacc to be specified in the preacct section wher it can be triggered
        if((!"%{control:Rd-Not-Track-Acct}")||("%{control:Rd-Not-Track-Acct}" != 1)){
			sql
		}
    }

    #____ END RADIUSdesk policies __________

	#
	#	Forbid all EAP types.
	#
	forbid_eap {
		if (EAP-Message) {
			reject
		}
	}

	#
	#	Forbid all non-EAP types outside of an EAP tunnel.
	#
	permit_only_eap {
		if (!EAP-Message) {
			#  We MAY be inside of a TTLS tunnel.
			#  PEAP and EAP-FAST require EAP inside of
			#  the tunnel, so this check is OK.
			#  If so, then there MUST be an outer EAP message.
			if (!"%{outer.request:EAP-Message}") {
				reject
			}
		}
	}

	#
	#	Forbid all attempts to login via realms.
	#
	deny_realms {
		if (User-Name =~ /@|\\/) {
			reject
		}
	}

	#
	#	If you want the server to pretend that it is dead,
	#	then use the "do_not_respond" policy.
	#
	do_not_respond {
		update control {
			Response-Packet-Type := Do-Not-Respond
		}

		handled
	}

	#
	#  Force some sanity on User-Name.  This helps to avoid issues
	#  issues where the back-end database is "forgiving" about
	#  what constitutes a user name.
	#
	filter_username {
		# spaces at the start: reject
		if (User-Name =~ /^ /) {
			reject
		}

		# spaces at the end: reject
		if (User-Name =~ / $$/) {
			reject
		}

		# Mixed case: reject
		if (User-Name != "%{tolower:%{User-Name}}") {
			reject
		}
	}


	#	
	#  The following policies are for the Chargeable-User-Identity
	#  (CUI) configuration.
	#

	#
	#  The client indicates it can do CUI by sending a CUI attribute	
	#  containing one zero byte
	#
	cui_authorize {
		update request {
			Chargeable-User-Identity:='\\000'
		}
	}

	#
	#  Add a CUI attribute based on the User-Name, and a secret key
	#  known only to this server.
	#
	cui_postauth {
		if (FreeRadius-Proxied-To == 127.0.0.1) {
			if (outer.request:Chargeable-User-Identity) {
				update outer.reply {
					Chargeable-User-Identity:="%{md5:%{config:cui_hash_key}%{User-Name}}"
				}
			}
		}
		else {
			if (Chargeable-User-Identity) {
				update reply {
					Chargeable-User-Identity="%{md5:%{config:cui_hash_key}%{User-Name}}"
				}
			}
		}
	}

	#
	#  If there is a CUI attribute in the reply, add it to the DB.
	#
	cui_updatedb {
		if (reply:Chargeable-User-Identity) {
			cui
		}
	}

	#
	#  If we had stored a CUI for the User, add it to the request.
	#
	cui_accounting {
		#
		#  If the CUI isn't in the packet, see if we can find it
		#  in the DB.
		#
		if (!Chargeable-User-Identity) {
			update control {
				Chargable-User-Identity := "%{cui: SELECT cui FROM cui WHERE clientipaddress = '%{Client-IP-Address}' AND callingstationid = '%{Calling-Station-Id}' AND username = '%{User-Name}'}"
			}
		}

		#
		#  If it exists now, then write out when we last saw
		#  this CUI.
		#
		if (Chargeable-User-Identity && (Chargeable-User-Identity != "")) {
			cui
		}
	}

	#
	#  Normalize the MAC Addresses in the Calling/Called-Station-Id
	#
	mac-addr = ([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})

	#  Add "rewrite.called_station_id" in the "authorize" and "preacct"
	#  sections.
	rewrite.called_station_id {
		if((Called-Station-Id) && "%{Called-Station-Id}" =~ /^%{config:policy.mac-addr}(:(.+))?$/i) {
			update request {
				Called-Station-Id := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
			}

			# SSID component?
			if ("%{8}") {
				update request {
					Called-Station-Id := "%{Called-Station-Id}:%{8}"
				}
			}
			updated
		}
		else {
			noop
		}
	}

	#  Add "rewrite.calling_station_id" in the "authorize" and "preacct"
	#  sections.
	rewrite.calling_station_id {
		if((Calling-Station-Id) && "%{Calling-Station-Id}" =~ /^%{config:policy.mac-addr}$/i) {
			update request {
				Calling-Station-Id := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
			}
			updated
		}
		else {
			noop
		}
	}
}
